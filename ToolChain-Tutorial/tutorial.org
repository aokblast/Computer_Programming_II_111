:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_VERSION: 4
#+REVEAL_THEME: serif
:END:

* CMake Tutorial

** Introduction

CMake is build automation which dedicates to building our program automatically. In this tutorial, we will introduce toolchain, Makefile, and CMake.

You may wonder why we have to learn these? Can't we just write some code, click a button to run my code and everything just work as expected?

The answer is: not really. Understanding how to use build automation will help us deploy and distribute our programs faster.
Now, imagining that build automation doesn't exist, then we must write instructions for other developers who want to use our project so they can build, execute, and test our program, which will cause these programmers, wasting time on reading and following our instructions instead of taking advantage of their time to find ways to improve our project. For small projects with tens of files, the building steps may not be a lengthy procedure. But when it comes to a large project such as Linux Kernel and FreeBSD.
It may be error-prone and time-consuming. The idea behind building automation is to solve this problem by reducing the procedure of building programs.

We write some scripts to describe how to build our program, and the build automation executes these scripts automatically. In other programmers' sight, they just download our code base, type one or few lines of commands provided by build automation, and get the program run. So, why not try some build automation to make things easier?  


** First step: Toolchain

Before learning how to write build automation scripts, we have to know how to run our program. Nowadays, details on compiling our source code are hidden by a series of tools called toolchain. Then the question is: what is a toolchain? (P.S. We will only talk about compiled programming languages like C, C++, and Rust in this tutorial.)  

The basic concept of a toolchain is built on the following components:

1) Compiler: The program converts your C++ code to assembly code
2) Assembler: The program converts assembly code to machine code. This is the program we will finally get.
3) Linker: Program link your program with an external library like a standard library
4) Standard Library: Library for common use function and structure
5) Debugger: A program that uses debug information or dynamic tracking

All of the above programs are combined as a toolchain. Most of the operating system providers offer their C/C++ toolchain to developers to build the robust application for users.

The following table are toolchains provided by the popular OS.

| OS      | Toolchain |
| Windows | MSVC      |
| MacOS   | Clang     |
| Linux   | GCC       |

Take GCC as an example. assume we have the following c code for our hello project:

#+BEGIN_SRC c
  // tutorial.c
  #include <stdio.h>

  int main() {
    printf("Hello World!");
  }
#+END_SRC

To get GCC toolchain generate an executable file for the hello project, we just simply use the following command:

#+BEGIN_SRC bash
  gcc tutorial.c -o tutorial
#+END_SRC

Congratulation, we have just built our hello project. The functionalities of Compiler, Assembler, Linker, and Standard Library are hidden by the toolchain. All of the things we need to know is that toolchain will generate an object file that could be executed.

By using the following command, we can execute our program:

#+BEGIN_SRC bash
  ./tutorial
#+END_SRC

It seems like that we don't need any build automation, right?--No.

Imagining the following directory layout is our project:

#+BEGIN_SRC bash
  hello-project/
    liba/
      a.c
      b.c
    libb/
      a.c
      b.c
    libc/
      a.c
      b.c
    target/
    main.c
    Makefile
#+END_SRC

Except of these files, assume that libb needs to use functions from liba, libc needs to use functions from libb and liba.

You may try to write the building instruction as the following lines:

#+BEGIN_SRC bash
  mkdir target
  gcc liba/a.c libb/b.c -c -o target/liba
  gcc libb/a.c libb/b.c target/liba -c -o target/libb
  gcc libc/a.c libc/b.c target/liba target/libb -c -o target/libc
  gcc target/liba target/libb/ target/libc main.c -o target/hello
#+END_SRC

Due to the library dependencies, we cannot change the command order. So anyone who misses any line of command will fail on the building project. It is also an easy example. Ok. Now let's try to type commands to build a project containing liba to libz with many dependencies. At this moment, I guess you may want to give up already.

When the project size becomes larger and larger. Hand-typing building steps is not a practical solution to distributing our software. So in the next section, we will introduce the basic build automation "Make" for C/C++.

** Second step: The Makefile build automation

Makefile is a traditional build automation in C/C++ but is not the main focus of this lecture. To get more information, I recommend you to take a look at this [[https://seisman.github.io/how-to-write-makefile/][site]]. This section will only introduce the basic concept of the makefile.
Let's begin with a simple example. The following is the directory structure of our project.

#+BEGIN_SRC bash
  liba/
    a.c
  main.c
  Makefile
#+END_SRC

The following is the Makefile of the project

#+BEGIN_SRC C 
  all: liba
    gcc target/liba main.c -o hello
    mv hello target/hello
  liba:
    gcc -c -o target/liba liba/a.c 
#+END_SRC

To build the whole project, we just need to use the following command

#+BEGIN_SRC bash
  make
#+END_SRC

Boom, you just build the whole project.

Next, let's dive into the structure of our makefile

#+BEGIN_SRC C
  <target> : <dependencies>
    <commands>
#+END_SRC

The target is the name of the rule. Each target in the makefile is a rule. For example, we have two rules, all and liba. "All" is the default rule.
If we want to build liba standalone, we can use the following command:

#+BEGIN_SRC bash
  make liba
#+END_SRC

The make program will build liba and solve all dependencies on liba.

The dependencies not only could be a target, but also a file. For example, the following rule is valid:

#+BEGIN_SRC C
  test: test.c test.h
    gcc test.c -c -o test
#+END_SRC

By using a file as a dependency, Makefile will check the last modification time of that file. If the time is later than what Makefile records, it will recompile. In controversy, it will not build again to save time.
As per the information given above, we can write a makefile for the hello-project as follows.

#+BEGIN_SRC C
  all: liba libb libc
    gcc target/liba target/libb target/libc main.c -o target/hello
  liba:
    gcc liba/a.c libb/b.c -c -o target/liba
  libb: liba
    gcc target/liba libb/a.c libb/b.c -c -o target/libb
  libc: liba libb
    gcc target/liba target/libb libc/a.c libc/b.c -c -o target/libc
#+END_SRC

For other people to build our program, they only need to type the following command and will get the final program.

#+BEGIN_SRC bash
  make
#+END_SRC

Now, comparing with the last section, we have solved two problems.

1) Makefile writers don't have to be bothered by the dependency. All the dependencies will be automatically solved if we write the rule properly.
2) Other people don't need to follow lengthy instructions. They only need one simple instruction--Make.

But at the same time, we are not satisfied with the hand writing dependency rule. We wonder: if there are some tools that can generate dependencies automatically?
-- And yes, that's CMake, what we want to introduce you in the next section.

** Final: The CMake build automation

Cmake is the tool that can generate Makefile automatically. The instruction of CMake is simple to understand. Let's take the hello-project for example:

#+BEGIN_SRC CMake
  cmake_minimum_required(VERSION 3.1)

  project(hello VERSION 1.0)

  add_library(liba liba/a.c liba/b.c)
  add_library(libb liba libb/a.c libb/b.c)
  add_library(libc liba libb libc/a.c libc/b.c)

  add_executable(hello main.c)

  target_link_libraries(hello PRIVATE liba libb libc)
#+END_SRC

Save the file as CMakeLists.txt.
The focus on CMake is add_library, add_executable, and link_libraries directives.
These three directives start with the target name appended with several source files or targets.
We use add_library to add three libraries and appended them with the correct source files and targets.
Then we add an executable file which contains main.c as a source file and liked with liba libb libc.
And as you can see, we don't write any commands this time. We just describe what libraries we have and what the source file is. All of the targets in the Makefile are generated automatically.

For consistency, we should put our binary in the target directory. So we use the -B parameter to assign the build directory.
To run CMake, we use the following command:

#+BEGIN_SRC bash
  cmake -B "./target"
#+END_SRC

It will generate Makefile according to our CMakeLists.txt in target directory. Then we can run:

#+BEGIN_SRC bash
  cd target
  make
#+END_SRC

To generate the program for us.
